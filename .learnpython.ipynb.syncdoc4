{"notebook_name":"learnpython.ipynb"}
"    Sunil Ramchandani"︡{"metadata":{"collapsed":false},"cell_type":"markdown"}
"The Python Syntax for following are as follows :- \nComments is by using the \"#' symbol.\nVariables are assigned by \"=\" symbol you do not need to define the variables \nThe print command is used to print variables."︡{"metadata":{},"cell_type":"markdown"}
"# This is example of a comment\nvar_name = \" This is the value assigned to the variable\"\nprint var_name"︡{"metadata":{"collapsed":false,"trusted":false},"cell_type":"code","execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":" This is the value assigned to the variable\n"}]}
""︡{"metadata":{},"cell_type":"markdown"}
"The different data types in python are as follows :-\nboolean - This is a basic data type with values True & False.\ninteger - These are signed numerical values.\nfloat - These are floating point real values\nstring - This is a basic datatype that can be created by single or double quotes \nlist -  A list is similar to a tupule with a difference that the contents can be modified\ntupule - A tupule is a sequence datatype similar to an array.\ndictionary - It is a a collection of key value pairs, it is required that the key values are unique in a dictionary variable.\nset - A set is a unordered collection of data with no duplicate elements"︡{"metadata":{},"cell_type":"markdown"}
"example_boolean_value = True\nif (example_boolean_value) :\n    print \"This value of boolean variable is TRUE\"\nelse:\n    print \" The value of boolean variable is FALSE\"\n    \nexample_integer_variable = -100\nprint \"The value of the integer variable is\", example_integer_variable\n\nexample_float_variable = 100.00\nprint \"The value of the float variable is\", example_float_variable\n\nexample_string_variable = \"Hundred units\"\nprint \"The value of the string variable is\", example_string_variable\n\nexample_list_variable = [100.00, -100, 'Hundred Units']\nprint \"The value of the list variable is\", example_list_variable\n\nexample_tupule_variable = (100.00, -100, 'Hundred Units')\nprint \"The value of the tupule variable is\", example_tupule_variable\n\nexample_dictionary_variable = { 'float' :100.00, 'integer':-100, 'string': 'Hundred Units'}\nprint \"The value of the dictionary variable is\", example_dictionary_variable\nprint \"The value of the dictionary key variable reference is\", example_dictionary_variable['float']\n\nexample_set_variable = [(100.00, -100, 'Hundred Units')]\nprint \"The value of the set variable is\", example_set_variable"︡{"metadata":{"collapsed":false,"trusted":false},"cell_type":"code","execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":"This value of boolean variable is TRUE\nThe value of the integer variable is -100\nThe value of the float variable is 100.0\nThe value of the string variable is Hundred units\nThe value of the list variable is [100.0, -100, 'Hundred Units']\nThe value of the tupule variable is (100.0, -100, 'Hundred Units')\nThe value of the dictionary variable is {'integer': -100, 'float': 100.0, 'string': 'Hundred Units'}\nThe value of the dictionary key variable reference is 100.0\nThe value of the set variable is [(100.0, -100, 'Hundred Units')]\n"}]}
"The if then else condtion is used when we want to control the program logic based on particular condition.\nThe for loop is used when we know upfront the number of times we want to repeat a particular statement/logic\nThe while loop is use to repeat a particular statement/logic when until a certain condtion is met"︡{"metadata":{},"cell_type":"markdown"}
"example_boolean_value = True\nif (example_boolean_value) :\n    print \"This value of boolean variable is TRUE\"\nelse:\n    print \" The value of boolean variable is FALSE\"\n    \n    \nfor x in range(0, 3):\n    print \"The value if x is \", x\n    \nx = 0\nwhile x < 3:\n    print \"The value if x is \", x\n    x += 1\n    "︡{"metadata":{"collapsed":false,"trusted":false},"cell_type":"code","execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":"This value of boolean variable is TRUE\nThe value if x is  0\nThe value if x is  1\nThe value if x is  2\nThe value if x is  0\nThe value if x is  1\nThe value if x is  2\nThe value if x is  3\n"}]}
"This is an example of an function that uses the args and kwargs arguments\nKwargs allows to handle named arguments that we have not defined in advance\nYou would use *args when you're not sure how many arguments might be passed to your function.\n"︡{"metadata":{"collapsed":true},"cell_type":"markdown"}
"def example_function(param1, *args, **kwargs):\n    print \"This is value of parameter1 \", param1\n    for args_value in enumerate(args):\n        print \"This is the location and value of args parameters\", args_value\n    for kwargs in kwargs.items():\n        print \"This is the key value of the kwargs parameters\", kwargs\n\nprint example_function('Test', \"Args Example\", integer_example=-100, string_example='Hundred Units')"︡{"metadata":{"collapsed":false,"trusted":false},"cell_type":"code","execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":"This is value of parameter1  Test\nThis is the location and value of args parameters (0, 'Args Example')\nThis is the key value of the kwargs parameters ('integer_example', -100)\nThis is the key value of the kwargs parameters ('string_example', 'Hundred Units')\nNone\n"}]}
""︡{"metadata":{"collapsed":true,"trusted":false},"cell_type":"code","execution_count":null,"outputs":[]}